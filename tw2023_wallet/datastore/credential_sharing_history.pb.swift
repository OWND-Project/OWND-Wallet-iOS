// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: credential_sharing_history.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Datastore_CredentialSharingHistory {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rp: String = String()

  var accountIndex: Int32 = 0

  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  var credentialID: String = String()

  var claims: [Datastore_ClaimInfo] = []

  var logoURL: String = String()

  var rpName: String = String()

  var privacyPolicyURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Datastore_ClaimInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var claimKey: String = String()

  var claimValue: String = String()

  var purpose: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Datastore_CredentialSharingHistory: @unchecked Sendable {}
extension Datastore_ClaimInfo: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "datastore"

extension Datastore_CredentialSharingHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CredentialSharingHistory"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rp"),
    2: .same(proto: "accountIndex"),
    3: .same(proto: "createdAt"),
    4: .same(proto: "credentialID"),
    5: .same(proto: "claims"),
    6: .same(proto: "logoURL"),
    7: .same(proto: "rpName"),
    8: .same(proto: "privacyPolicyURL"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.rp) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.accountIndex) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.credentialID) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.claims) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.logoURL) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.rpName) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.privacyPolicyURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rp.isEmpty {
      try visitor.visitSingularStringField(value: self.rp, fieldNumber: 1)
    }
    if self.accountIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.accountIndex, fieldNumber: 2)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.credentialID.isEmpty {
      try visitor.visitSingularStringField(value: self.credentialID, fieldNumber: 4)
    }
    if !self.claims.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.claims, fieldNumber: 5)
    }
    if !self.logoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.logoURL, fieldNumber: 6)
    }
    if !self.rpName.isEmpty {
      try visitor.visitSingularStringField(value: self.rpName, fieldNumber: 7)
    }
    if !self.privacyPolicyURL.isEmpty {
      try visitor.visitSingularStringField(value: self.privacyPolicyURL, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Datastore_CredentialSharingHistory, rhs: Datastore_CredentialSharingHistory) -> Bool {
    if lhs.rp != rhs.rp {return false}
    if lhs.accountIndex != rhs.accountIndex {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.credentialID != rhs.credentialID {return false}
    if lhs.claims != rhs.claims {return false}
    if lhs.logoURL != rhs.logoURL {return false}
    if lhs.rpName != rhs.rpName {return false}
    if lhs.privacyPolicyURL != rhs.privacyPolicyURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Datastore_ClaimInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "claimKey"),
    2: .same(proto: "claimValue"),
    3: .same(proto: "purpose"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.claimKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.claimValue) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.purpose) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.claimKey.isEmpty {
      try visitor.visitSingularStringField(value: self.claimKey, fieldNumber: 1)
    }
    if !self.claimValue.isEmpty {
      try visitor.visitSingularStringField(value: self.claimValue, fieldNumber: 2)
    }
    if !self.purpose.isEmpty {
      try visitor.visitSingularStringField(value: self.purpose, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Datastore_ClaimInfo, rhs: Datastore_ClaimInfo) -> Bool {
    if lhs.claimKey != rhs.claimKey {return false}
    if lhs.claimValue != rhs.claimValue {return false}
    if lhs.purpose != rhs.purpose {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
